//
//  main.swift
//  day3
//
//  Created by Jerry Hsu on 12/3/22.
//

import Foundation

let sample = """
vJrwpWtwJgWrhcsFMMfFFhFp
jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL
PmmdzqPrVvPwwTWBwg
wMqvLMZHhHMvwLHjbvcjnnSBnvTQFn
ttgJtRGJQctTZtZT
CrZsJsPPZsGzwwsLwLmpwMDw
"""

let input = """
TZZjzzZLfZbzgzZNNJZjwCVbwMmhwCbBpCMMBCbM
qRQPDqnWFQDtCCBQmQwmGGVG
FPllWPDPrncZsLVrgSZTSZ
RczPzRzvflVwfplrZQglmmJJDGQJ
nFbBWWFZbZtJDjmgmqqF
bnMNZWnWWHTLBBdwcCwcPCwpCSpPLc
CjpMtptpChnpMnCSGjSShMqpTVVWFFTVNVNLmHwmHLTcFnVT
fglsGJsJssBPszvddgTFVTFFFBwwTVVmHVFF
JgJrDgsPfMDhGhCRQC
PSMDSMhwmPwqDMmzrtttNQvNFmFFGFtLld
nRTCCQjcTVJJTVTbggTnFvtNdGdlFbFvbHtWFLNt
gjfTZZCRCnZJjJRRQBCBszDMPppfsPwMzfMqDsSs
LTmnZTgMmbWWGWZQZb
cHCCHHwsPtsHQtWfWjtGlWjbjt
JNQQzzPwwHsRwNSRdnnddqqvSMqMvDqm
CZFNGZfHvgfgZzFZfNfPVJMBrqVhjrrrhvvSjbqv
czlDnlcDWLnlnLQwTbqJqMwqjhVBbhJhJJ
RDQTTWzLWsDGsNHNNgpZmC
rWzbWWMWcrCbfzbwpDrQNqmqNwTNBN
FvsVggVvLGsHQHfppmwTNBfN
VGhsghvZLjPSLshgFVPGFPVJWCtMCJMflJtdJWCMcttljz
bgScSbJwPNqrQLCgLg
BzTsRVGmTDBZBwRVmzGQNZjrMCqLjWrqWNQNnr
GvdRDdzGzdvdDdmTzfwhfFlFPlbfchvlpl
JlqjMtqtSGGZjqSMlmvZZbChRRQbbPhBhCbRBr
dLfzFNVfLLzwznLdFzzwWQBQVBhWbJDrCPVBBBPP
HLgdNddfMjGJJgJt
nZHZDJHLTDnrHrbGpRrRzR
QmsBjdmBmqQzpRbZbp
ttSjjjdWvsFsmBMBfWWMMtwCNCZJvLCnnnJCZcLTvnhN
bbgngMMPfnwPmPgPDPNZMtptHzHtRRvpVHRz
rsWWhJCWqBHBNJNZpvJtzRvF
rWBrjGGsQQWlQcllCDLfwHQTDDgfQPmnDT
lWDFllmGhbWzCglHHlRHMqCq
fBtjwNwfJfZvJJBwBJZjVLNnnnMRVTzgMVVqTLzT
vJQtJrprvrbcdcpmzDDd
bmhbRmhjwddjHMGHnNtHNQNm
nBzVpgFnzVgLpFfHNGqtGfLGGNfH
BTgVVPPSPBSVlTzpzsbWhjWjnhWZlwsWZR
lBQVBBMDTMSTHHCqgLHCzv
ccWcNhtfpFvphspFcttHwwqzmdsCqLgLzLPdLL
tNjFZpnFtJNZJFfjJNpNNFjVbVDMVGRZMGlbQlQrBrbvQr
bRJtJRfRdwRBbwJzhGGcHpwrpCwDclpHDD
hSgnjPVmVVGcWVGWpV
STmFgSnPqQTjNmqJftLszfMqBhdz
WzjrRLWnlRsVRLLwtGmdhNBmbmwN
ZccgcpMfQTpgcpDDvNbtdhhhMGHtdFBNHB
vpDggvPPTvZTfTvpZcPQSZDsqrlrnRGjsrjRCrSlWRljjS
DbZfRRZfPjWDfDntnzggvgMLmVqMMmlLQjFM
NCJCCfBTThBJssSHcgFMlmMvlVHVqVgmLl
rfTJJcJrJdShscSBZbtpnPRDDdnPDRbt
zrTfLGVVLZsrsJcGJVsvQMhdlmMPfjlhlflflbDP
pCWCwRbWBgHlDhPMDPRjjd
pSggBwBCNSbrJLVTTVNG
CNCMSMgQCgQNQhfMGSGSzgfGJhchrHHwBlnJlHPqBBrHwsww
ZVWDptmTtbptpDvZWsPlwblrJPbnHcqnJwrP
pRFtWZVVpVWWZVWtQLzsLQMLzCfFsGgz
MlcpDmgWNlPqcmmqmcgcPdNDRjhLSRRVLjRRShGFjFWRSLLW
bwQJnzbzJTbvMJSHhGGHRjzLGRjR
wZbBwwQvtbtQtBbnvJwbCnwmsMpNcccgDmdPcsqqqsDqCc
zMhMnRbZMpCblpzLlhJPRjDFcQPtJQPcDdWj
mNSGvgdSsBGwwNDvWtQJWjJWPHFF
GmdgGdgfqqNBgVGrbCMhrMfLLflhpL
PVHHPMLMgLQSLLsnHBCZfhzpRfhTpdRppSfdZf
rgmWvWgFrmGlZGGfphhpZG
bJgDFqFcmmWDJWbvJFtMCPQsHPHBVPVCQPcCsQ
VJJHNNmtGqRmMVVwRfTCRfnQpFTFnF
vSvjSvbBzvldhcGwGffFCQCwgrFd
jLhhlGjvczDhLSlDWjLzctHMZtJtHmqHJZqWmVsMqW
LhchvRJtHzhdTTdJjQLQjQVVnjSmLMLQ
NFpClSPqwqNgPPNPNglllrBQBrQVjQjmBQnfBfjQjC
wWGGpSwSZNpNPFDwPDDhzDdvbvJzHHJbhtzv
gtFtNNmlGzQtNPttfDMwwfbbMR
LVcBjsBjFJrLFWVrBrMbbMSSPpDPPqVDfpPb
JrCBnsdWJJrHZdFmGglmmg
BmCCWSLmWsmtCCSppSmmpcpRfMZjjBgJJGGjBwZfgjZjFwJw
TPTPnTPrPVvQTTzTVdPMrJJZwggjfHwJJgjHZrJFwH
NQvvNnQPDPhNcstcStDMWWWS
hntthHVQVbbbSzgjgZjngjRD
TTvJJCldFJTvFFTBFlpTzvvsRgZWGWSLGrlWWRSGLjRGjRDL
TzCcFcvcsCmqPMQwQPcwPM
DltVvVLvbGPDhjRhhjSZjSSL
CffszNzssHCCqJjJnqRnpgRpZB
CszNWdsfDWtZwwDG
DdbmddmzDDNbsqzvzmdzsdsRJLjqtVWWjWJBBVBwVjWJtB
CnFPCcCcPFFFGffjjCWBVwwtRwNwCw
QNZlphpNDpHsDrvg
gdHSCbCTGgQbtNLvgrjwNMMwrr
BnzVRHFZVHvNhNRNMMhW
zFzFcnlZPHlbQdlT
GmddjTrgFgmgWGmFvmmmFFfwSCVpwHVrHpwhwrpCBfBC
tctRcRRCMtsMsMDPlDtDbMzbQJJbhwHVQJhBHJVQHBbpfB
tPDDtcnRRqzzcCzLPMLPRddWTdqgdZqZTZqdGmjFWv
sWvfGlGqsSggNcNcmf
JBwwVccFJtrzpMwtrMMMLTnNnJngJgQNSgmTJgLN
wtPMHrRrBwtPVRHrrHVPZvqDWWWcsGsvqDlZZd
jBjBBJRhCJbjffCjWlDfmbFQmZFgPpmmgpmbSSQF
dsqGrttGhswQmqpFFqQw
THdsdrdTHzLLdLTsTdtHNshlDffDCHJDjfBcBRlJRfjV
lDNlPBQlccQttcNBcDPvFFJmdTwtFJFdTdFgzg
bCWMLfpZLZLVhMbGLLsVzTwmhvTgSJHwHdTvSFSwJJ
RCZZVZLZWLRZpZsfpVsscjzQRRPQcPcDQzPljzPB
tVfCLfRVCGTRCPtRMPftHGqpnnqpdzqNbHGdqzHd
DlDlWmvDWsWJmMmmsWvWDlSHzHpnpbNqnbnrppbbpprJdd
DvhWDFBhvslFSDFPVPVBfgwgfCtMLV
FtlLQqlDnMmFJRPM
hwlpwBphHplpdHfZnjRRjMmCgfPZgJ
BdpwvzcNpBrDbLTslszG
RjPhcnNzRcLcFlsFNlFRfTffdhJhSTVqqSdDMVMf
ZWtZgrgPCvrbHSSfMqJTDWpdMf
vBvHgCmgHtgvtrHbwcLjNLNFcnPBNcPLQQ
FZhtMtddjCGQSVjmjC
qbvcnvPqBWcPVVCTCmSQLVCq
vVBVzBNpDNhgdZDg
lNVtllQFQVnQNrZpCtQCdZZjSbfRbcDjZqSfTqDffJ
HzBJBvPJLWHvwmBwHWRsbsqfbSbzbTbTTRDs
vLwPHLLMGHwGBWBHLvBgBVCgrQQpdprNVttQJrpQdQ
TbZDQlZDCHjwtbjnRSTRTPPTBWWWPB
GhpgpLJFcvgcMRqfBBmSQggzWq
LcFQpGdGsrjDDDHssl
qzpPgTpnNWRfTBBCWf
rLFsVcFltVBfdGClPdGf
vmtZvwsZrLFFFrPDqzDvjzDqJMjv
lDlzzsMPDssjsSGTjlTTsqbbftfqNwJNfHqqbfDmbW
FFgpFndhQLnhnLRpQCLnVrgtHttvfqJmNbqWWbJHNHtb
pBFrVVrmZGSBBZsz
bGMfcMCPPCtcLqPLCRqPZnjLVTdnjjWsVLHVlllVVL
SwzDBmzgwFSFQzvgBrgvwFdVHjHwWHJsjnVsTWVHHWHJ
FFrBNpQWpFrgFSmmSpQmrQQNZPPRRbfGMqCGcCPGtMqqcZ
PBhcVpBRPcqHfnjRRJJl
GsMrsGTszsrMdnsGZmzMsCfDtvHfHqvjJlvdqfHflvtq
gmrGMGGmGgbmsrrCThnBFSQSFVFhSnVcpg
QCDnqdqVPswpJZMLLCHZMJ
RhchlRBRWlLmZzVWVJGV
VrhfhhBgTcRTVhdDFwdwqTDnnnjw
jVsSsLjJJmSLlmJSlPthrhHZGthLpZLdWZ
nqFTFNbRfnDCRzfnzqPBpGcdGHttWHdcZGRrtchh
bqNzTTbFTnwnTmPjvwsVgQVjgl
BBlNWWMlVWQlLPNjVLWWGMQcJCscFSmwRCSnCFJscwcw
bbHZHvHpHgrqSCcwvSsFFRsv
wwbhdfdwZlWljdtNdW
NmlnhSNwzjjswNvqqqbjgddqtgVt
TQMTMrFJHDFTFBrTMDMQDQgdnCVggtpLpvggnQdvdQ
fJPJHrFZFBHTDPrTJHZrFswsWnWGmmGNlwwlRsmSZN
bdntqdNMQCtcnnbqtNtcgQWWjjFDjhSBSjJDWSfDFWBc
RwsZzRvZQPQsGPWjphzpfjfBffzf
GPsrRQvvQlwlMnHHlTgMNT
TnnnQTLnBPQMRMpgGRLGwp
VNcvvjjVczRRjsZvvqgmpMGwZWZmJSqwwW
tzvsdrsVdFndRDbdbC
qSfbWlZVPdWmmcjvjjwrcwQm
TpTTpPJzTBnNsshnnTsctLwjvQMzrLrjjFMtjv
NPsNBhNJhBJgNnqSSZlSdVgVGqdq
pQsgcsdSpmsJctQhrhqDHPjrjNQH
VVGGbfvvMMBZPjjHqVVrTjmC
fZbfnRLBfbZGblbfMZnBGZFlzJcRdttwtJtdzmdswcJJdpRs
TDqDqTZFFqDqdDvSMwtCbjbFjbmGGwCffG
hQQnchQZpQzCfmGtblfLhw
RnNpRPrcpsRsVWHSDZSqWrDJ
gLqgTfgwTCwmgWWrfCcRdvBCGGBZjGRvvZ
MFbPMPnNzFbssQFpQNNScQSdjvBBBSRllBvZvc
sHMHpzsJnpNMNnHsnMJbWLVwmwgVwDdDJwgDffrJ
QGdbSLSzBVbGRQrJfllDbnfpJfltJl
ZMwPCFPwPmFgCFvZgZmcFwcPhJnphhscQnJhJnsptnDNthts
PHZgCmwggvMjZFWjFvQTBzRGHqSRRTdRVGGQ
zJRppmjPMCjJgtBQWtZZgPtg
tTFsltFtVGWnllQBnn
swLfbFSvsmJCCSRCRt
MZVRQzMwfRQgQQDvncrvrSHHdSfS
tWWBhJbhnBsWCWCGdDbvSpvDpcrrcqHq
NBTCBJsCTFJFjzjFMwnzLR
RBhlNZsgrZNdbfrrmFGbjb
ztJLFLzLQDtnnCLLCzSTwzJmqmGGjddPmSPPmGjpdqGMPj
JcLLFVtLJDTQCsZgscvlWBZHgv
hznggMvgwwPCDwhnCMWsDlHjtJPjtjrZlljtPJjZHt
mvvGVVcvHJtppGpS
bVQvQLfRRbfFFwhMsFshsqsFzM
BBRWFZHWSGRZvQtQRpRtHHBjTTcqhzfnBcfzchjTTnhncT
PbwdVMbmlDZmNPTfjrcfnzjf
sMVLmsdmldLVmJLCDHFgSJgZSSGHtFppFZ
SGwFSCvtwjjDvDGDCjjDCNRnzbbnpnBppHBNhbbTpqbB
rBBllQlgslmnmbzqRm
scQsLMZsPMVfMrFwBZtvvCWFtJwS
nlhLFFSggjMnLnLHTPlMTSBfRzrMQBCBCRDDdCdQrzWr
ZwFcssmNJqNNcZGFzdBrRZCDCdCffDrR
mwbwGNcwwpSjPlFgpPlH
HsvNvddbZJDDsNbDqvsqNsqnjtllczmjjbBjzjQzjlncnc
VTCTPGhpwGLfChfGCpTrnrgQrlntrQGQcrcgQr
WpPfLTPWPhMPhwCNdStvSdWHHWHDdH
hjtjnnbLMCwCMhbgfJpfDZpSsGHDHNSmsf
BqBQBccqFrWcPTWdWTcHHNHJpsHpmDDsHHSFSD
QRcPzqWzzzrdzzWvTqQcBcRgnhmhmCbnhtvMmggbLLgLvg
zdTNLLdRdTPFFJFllQSzwJ
mhmBmBBjtjhHmjvvBhvthThnFwQwwSnWbGwlQbQtnnGJtS
cTvHTgjCmVHZgHvhHHdRfMddfLsrRfZNpsPL
lfLnsHhHJBBfBGrBpS
VPjqqwVVqNjqQVVCVPNNVQpGpmppcBcDmGmpsmsDsCrD
QdQNFwQdvjvRqFFqvRPqLgngshhRJsLnHLWgLRhh
dwRwQVNwwJQNnnhmBtZZdCZhFBrP
MMHTvMjsWlmhhBrrrlhm
jWTcWWDWsWMTgjMGsHvGGMsnJzVNpRQQDDpbJVbnnwNrnV
NcRvJCGnWnNMwtMPlMMF
rqRLrVmTrjjRmBqjQLrjzZgMgDHltVPMgFbMFDbPwMwH
fzjrZQSQzBjnvfnsJcGspR
fHPFZPsmffftTpsTqJGhhDjC
bbBdcbcwNGzzbNdBdcNQqJDDTJhDCNjQpRRCJT
VcWBbgBMWbMdzPmPtGWZmLWPFv
zDWFvgCCvWDgVVmrZppPbCPZ
wdqsBhcMdbJJmlBgHg
hTwTQgLNMTsQstjzvSTTWjvfRW
vGGwWsvjpsCShrjTCCrj
CmMCZCtqzmMzNgZgdZzSrzPFrThnrPPHTcrSnH
VVMtQZdgZqLtqLZVMffwwDRCLGWlCsJvwpwlRv
fJfhpVVzMpgczZSqSSnZ
NvPNvRsmNCRsbsvNbhjqgcDZSqSFFmgGGnZZDg
TChvRBBRPsJLTMHMQfwV
CvNPsrfrjvwwfsjwsrNlgDzzBmgmNhlNBHgg
JVmdMJmcMTSqVlnlnnzBHBGg
SmLqSSWqbcbbWqJqqFcTJfPwPwtwWCfrrPrsQvQZZf
hMRnnvfRntfvcGqccDqhHlSLSgjGLWlLHlWPgWPS
bJsssbJFCZsQCsdQFzJWwSPSdSgdWwvwmHWWmj
QBQbTzFzrrzTTtfvffcfqTDM
fdcRNRvdNwczRFLcvNvzRvDSjhlmhclShjSnmMlSmDSS
VtJqbCqqVCfQqVpJHqZfmGDhgmjlMHmDllmggShG
qqtqTpVqJpVPZbffWTNfwzvRrFLL
mmhccmZGNcNhWNmDDGCmvlLWjpjbJRSpdrnzzbRzSjLJpJJz
BQHBgtZQqwTTtfndpSJJbJfbjjRp
THFVBZqQsqTgwtswWWlMclMDNlNclVVM
GPmLbhQmDbbDHfpCQCfdCfTr
SlWVScMgpzFSjgSMtBjTrNNdrfjrHrBd
ZzzsWWnzWFcsRqpJmPhqsw
cfNQdfdRcNHNFcqRcqqdWmLQgMwwMssLggpLLsmm
rTtGGhBTJSThwssmgssGzpHC
VbTTlJvVHbBJthtVbrJRdFnjljqZdfPqPnRdFN
tLtpstBLtzPnQBtFBtMpnpQPhmGGRRhMhGNRRCCmRJmmbvNJ
ffflfqqVVHllVHDVNVZHlTDGSGbGSvhmvTRCCSTjShShCv
DldDlZgWcDdfDZggfddccsnzLWsnNwPFQzPBwLwzzF
FpRCrNpMrCpNRZCrsCpZrCpqvmJnvnLPBwfvfmvzBJnwswBw
DbbVStQgdbJmLbJm
SHlSShlhSHHWcWlghFMNqcRqcZrFpFppTJ
QFPnsjqjtQPWfCZZlZbT
dwrMzzWRVWJVDDlfDlrfDlhl
BNzVdLWwRNmzwWBRVBVzSQQLtnnqSqssFvtQFsjL
TGfDmTcCMMmDsCspRbCCbsMJvWPvSSjZSwhFwwFgjPJZwG
NNHLHBNHrgVFFjJwFJZLhv
BzzqQQnVtrdnVNrtVNBlppbbDCRmdfggRCgmTscf
rmbcvbRbzrsZZCCNQjwdgRGjwGQGLVML
htDnDtHWnWPjVHQdgdNwHg
PFFTlhllffsNsscl
hFSlSlShLppwNlwH
fjSvvfbzBfDjPQvBDqjfsBGdwwLppMHmmHHHbNNwGnmG
SqzVBZDPPDQVFWgrWJTtCg
ghlqSlFhCFRgFsssSqjhlsVsvNPtcNdndctVzdzJPndQPnJd
TwfBmZmLwLZDfWZTbGQPtvzJzdLNcLdrQrcL
GmGwDbZHbmpBmwBWmGDCpvShClvSjgMjRpMqjv
vDDQpzjbqDQDmJvmRFBgNdWcQtdcHcctWcdN
hTfsLlSMCCSCfGCPlhfnGtgBcBHBdgLdVttvNtBBdg
lZvlfPffnZSnMzDjzzmZzDbwqq
cwgNgWWNccLcHnLGnnHD
JRrPNPNlGHPDtzLv
jmBJljNljRZZbpQZBgZp
WWcWLtwHcHLwWRwPWDwZGrCMvvFvZnDrvF
JVVmdbZmCvzGCvzm
ZQgdjVgdjQhJZQbhblbNQqjJLsPSsppscPPWhhWtSctpHsHs
fZtsGZsQQtpFrLqZrLQGZfHmdBjSMNmmRNddbFcMcbmBcc
vnwnlhlTWllgnJVTTgDTnvTwdcjSbRdbHMdcMMNdVdBNjRHj
zDvHnPvTwhnDDCZpLLftqzffst
hdCvWvQQlvlZzgCcGgjCPSLC
HMTHMDRRtmBNtTRDrRmmPcjGPPrdSzcLjjzdfzzL
tqMsNmmVMTNmtMHbZbnJdblZnlwWbV
bzQNPzMbVrfPfLrjrj
ZvZnzsTmnlnTWnJTvSHSsJDvBrdwwwLBtjrBBRtjwHqqrfLf
zpWDWSnnTnJmDzSMNchQcGNMQpQGGN
McCNssGmscnNmmsNzLwwLTSTRBJBBZLFTz
WTbhQbfPvWThFwFWJHBZWwLH
jThbtbPjvDDvDhqjppdcsgcGGcMmNlNldtNt
VsRLrPMPrrNRRDMDNsDMRdGCdGGZZZwljjCCjHCHQwcG
qhmfBgtqlfqzfTtggSWwbHjcwGjjbwwcTQCC
lnSfStzhvfvzFgvqsLJLrpPpFsRsMNPP
mFfWmmTbcFNFZWbcCftLCsCLGLfCGqGV
DQQMlJhjGqtswZDD
BpBhQSSQRSljRJRvQllnTWNHrWccHrNppbNZWp
llSWcPmCDRCSmjPTCCSPHtLrfJnwrJfVBRfJwrqB
FFFgdFdpGVHtVGwBtn
gMbbsNdvbsQgppppvvszvzWTTTlMCnlPDjTlDCWWccmC
fzMlGqVMwzSSPNRBrRZrFrFRGZ
blnlQnlWFZbmFbHr
CgttsQpstcCtnslqfjhPhVzMgMPz
SrSHtjrJQZjBpvNctmnRvnDm
GWPlhPqFfPsGwCqsnsGszWGwNdMLpRvLmRNcNpmRmvDfpMLM
GPCWWWzbbzqPnnCbPZHbQrQrQgVBVJJVJV
ZVhCwqvFZVpwdhLdqLhtvcGBcSNLRSRBGRBNGNSSmN
lTjnlnjgslsjJTgrMrQQjjTSGSpcGRSmDBNSNJcDSBbRmS
zMrjllgnPrlrnlWrQgTgzgvwqpFwZHChHvPwCtVptCVt
RTjjznsTsnnrzRrmTmrNNCMhwMrCNNCwWhCMGN
DvScpDDVfBPqVcSbDpbfHpqwCWGJCwCJhvFdFFwlMGJWCG
fhHPbhZSpDbDTmsTZTjRzzQz
QbVQvNrrdFcbcMvvdNrcGrrczPnPplPnfnpzwpgmlflRVwwP
jBHLRqZWtLLqWDhBLshBCLsHgpfftfPmmpfpwnwfwJgfpfPn
WCRhsLDsDLBChTLWHChFTTMdGTQGvGQcMQNGMd
"""

func parse(_ input: String) -> [[Int]] {
    let lines = input.components(separatedBy: "\n")
    return lines.map { line in
        line.map { char in
            switch char {
            case "a"..."z":
                return Int(char.asciiValue!) - 96
            case "A"..."Z":
                return Int(char.asciiValue!) - 64 + 26
            default:
                fatalError("invalid character")
            }
        }
    }
}

func findDuplicate(_ list: [Int]) -> Int {
    let length = list.count
    let first = Set(list[0..<(length/2)])
    let second = Set(list[(length/2)...])
    return first.intersection(second).first!
}

print(parse(input).map { findDuplicate($0) }.reduce(0, +))
